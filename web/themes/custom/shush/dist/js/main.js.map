{"version":3,"file":"js/main.js","mappings":";UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;;;;;;ACNA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,kCAAkC,sBAAsB;;AAExD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAsB,kBAAkB;AACxC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;AACH,CAAC;;;;;;;;;;;AC7PD","sources":["webpack://shush/webpack/bootstrap","webpack://shush/webpack/runtime/make namespace object","webpack://shush/./js/script.js","webpack://shush/./sass/style.scss?cca4"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","(function ($, Drupal) {\n\n  Drupal.behaviors.custom = {\n    attach: function (context, settings) {\n      if($('.apigee-edge--form').length) {\n        $('body').addClass('apps-create-from');\n      }\n      if($('.zcs-client-management-user-edit-form').length) {\n        $('body').addClass('apps-create-from');\n      }\n      if($('#block-shush-main-menu .menu-expand').length) {\n        $('#block-shush-main-menu ul li a.menu-expand').each(function(){\n          $(this).parent().addClass('menu-active');\n        })\n      }\n      $('.user-profile-name').each(function(){\n        $(this).html($(this).text().substr(0, 1));\n      })\n      $('.user-profile-dropdown').each(function(){\n        $(this).html($(this).text().substr(0, 1));\n      })\n      $(\".user-profile-name\").unbind().on( \"click\", function(event) {\n        $(this).next('.user__profile').toggle();\n      });\n      $(\".zcs-aws-app-list table tr td.api-keys .pwd-toggle\").unbind().on(\"click\", function(event) {\n        $(this).parent().toggleClass('password-show');\n        $('.zcs-aws-app-list table tr td').not(this).parent().removeClass('password-show');\n      });\n\n      $(\".zcs-kong-app-list table tr td.api-keys .pwd-toggle\").unbind().on(\"click\", function(event) {\n        $(this).parent().toggleClass('password-show');\n        $('.zcs-kong-app-list table tr td').not(this).parent().removeClass('password-show');\n      });\n      \n\n      //  Password copy\n      \n      $(\".pwd-copy\").unbind().click(function () {\n        const copiedtext = $(this).closest(\"tr\").find(\".kong-key\").text();\n    \n        if (navigator.clipboard) {\n            // Use Clipboard API\n          navigator.clipboard.writeText(copiedtext)\n            .then(() => {\n              alert('Text copied to clipboard successfully!');\n            })\n            .catch((error) => {\n              console.error('Failed to copy text: ', error);\n            });\n        } else {\n          // Fallback for browsers without Clipboard API\n          const textArea = document.createElement(\"textarea\");\n          textArea.value = copiedtext;\n          document.body.appendChild(textArea);\n          textArea.select();\n          \n          try {\n            document.execCommand(\"copy\");\n            alert('Text copied to clipboard successfully!');\n          } catch (err) {\n            console.error('Failed to copy text: ', err);\n          } finally {\n            document.body.removeChild(textArea);\n          }\n        }\n      });\n\n      $(\".secret-password\").unbind().click(function () {\n        console.log('sec click');\n        const copiedtext = $(this).closest(\"tr\").find(\".secret-key\").text();\n    \n        if (navigator.clipboard) {\n            // Use Clipboard API\n          navigator.clipboard.writeText(copiedtext)\n            .then(() => {\n              alert('Text copied to clipboard successfully!');\n            })\n            .catch((error) => {\n              console.error('Failed to copy text: ', error);\n            });\n        } else {\n          // Fallback for browsers without Clipboard API\n          const textArea = document.createElement(\"textarea\");\n          textArea.value = copiedtext;\n          document.body.appendChild(textArea);\n          textArea.select();\n          \n          try {\n            document.execCommand(\"copy\");\n            alert('Text copied to clipboard successfully!');\n          } catch (err) {\n            console.error('Failed to copy text: ', err);\n          } finally {\n            document.body.removeChild(textArea);\n          }\n        }\n      });\n\n      $(\".client-password\").unbind().click(function () {\n        console.log('cli click');\n        const copiedtext = $(this).closest(\"tr\").find(\".client-key\").text();\n    \n        if (navigator.clipboard) {\n            // Use Clipboard API\n          navigator.clipboard.writeText(copiedtext)\n            .then(() => {\n              alert('Text copied to clipboard successfully!');\n            })\n            .catch((error) => {\n              console.error('Failed to copy text: ', error);\n            });\n        } else {\n          // Fallback for browsers without Clipboard API\n          const textArea = document.createElement(\"textarea\");\n          textArea.value = copiedtext;\n          document.body.appendChild(textArea);\n          textArea.select();\n          \n          try {\n            document.execCommand(\"copy\");\n            alert('Text copied to clipboard successfully!');\n          } catch (err) {\n            console.error('Failed to copy text: ', err);\n          } finally {\n            document.body.removeChild(textArea);\n          }\n        }\n      });\n    \n\n      $('.zcs-kong-app-list table tr').each(function() {\n        var lastTd = $(this).find('td.app-operations');\n        var lastTdLinks = lastTd.find('a');\n\n        // Check if the links are already wrapped inside the desired div\n        if (lastTd.find('.kong-app-list-edit').length === 0 && lastTdLinks.length > 1) {\n          lastTdLinks.wrapAll('<div class=\"kong-app-list-edit\"/>');\n        }\n\n      });\n      $(\".zcs-kong-app-list table tr td:last-child\").unbind().on(\"click\", function(event) {\n        $(this).toggleClass('active-dropdown');\n        $('.zcs-kong-app-list table tr td').not(this).removeClass('active-dropdown');\n      });\n      setTimeout(function() {\n        $('.highlighted .messages--status').slideUp();\n      }, 4000);\n      $('.home-slider').slick({\n        dots: true,\n        arrows: false,\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        autoplay: true,\n        autoplaySpeed: 5000,\n      });\n      // $('.client-Layout-column-wrapper select.country').select2({\n      //   dropdownParent: $('.client-Layout-column-wrapper'),\n      //   minimumResultsForSearch: 0,\n      // });\n      \n    }\n  };\n})(jQuery, Drupal);\n\njQuery(document).ready(function($){\n\n  // Toggle child menu visibility when the parent menu is clicked\n  $('.site__menu .menu-item--expanded > span').on('click', function (e) {\n    e.preventDefault();\n    \n    const $parentMenu = $(this).closest('.menu-item--expanded');\n    \n    const $childMenu = $parentMenu.children('ul.menu');\n    \n    const isExpanded = $parentMenu.hasClass('menuexpand');\n\n    // Collapse other menus\n    $('.site__menu .menu-item--expanded').not($parentMenu)\n      .removeClass('menuexpand')\n      .children('ul.menu').slideUp();\n\n    if (!isExpanded) {\n      $childMenu.stop(true, true).slideDown();\n      $parentMenu.addClass('menuexpand');\n    } else {\n      $childMenu.stop(true, true).slideUp();\n      $parentMenu.removeClass('menuexpand');\n    }\n  });\n  \n\n  $('.anchor-dropdown-btn').click(function(e) {\n    e.preventDefault();\n  });\n  $('.login .header-site-logo').insertBefore('main .highlighted');\n  const wordsToWrap = ['CAMARA', 'TS.43'];\n  const regex = new RegExp(`\\\\b(${wordsToWrap.join('|')})\\\\b`, 'g');\n\n  function wrapWordsInTextNode(node) {\n    const parent = node.parentNode;\n\n    // Skip if already inside a <strong class=\"text-bold\">\n    if (parent && parent.matches('strong.text-bold')) return;\n\n    const text = node.textContent;\n    if (!regex.test(text)) return;\n\n    // Replace the matched text with <strong> elements\n    const newHTML = text.replace(regex, '<strong class=\"text-bold\">$1</strong>');\n\n    // Replace the text node with new HTML\n    const temp = document.createElement('span');\n    temp.innerHTML = newHTML;\n    parent.replaceChild(temp, node);\n  }\n\n  function processTables(context = document) {\n    const tables = context.querySelectorAll('table.attributes-table');\n\n    tables.forEach(table => {\n      const cells = table.getElementsByTagName('td');\n      for (let i = 0; i < cells.length; i++) {\n        const cell = cells[i];\n\n        const walker = document.createTreeWalker(cell, NodeFilter.SHOW_TEXT, null, false);\n        const textNodes = [];\n        while (walker.nextNode()) {\n          textNodes.push(walker.currentNode);\n        }\n\n        textNodes.forEach(wrapWordsInTextNode);\n      }\n    });\n  }\n\n  // Initial run\n  processTables();\n\n  // Observe for dynamically added tables\n  const observer = new MutationObserver((mutationsList) => {\n    for (const mutation of mutationsList) {\n      for (const node of mutation.addedNodes) {\n        if (node.nodeType === 1) {\n          processTables(node);\n        }\n      }\n    }\n  });\n\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n  });\n});\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":[],"sourceRoot":""}