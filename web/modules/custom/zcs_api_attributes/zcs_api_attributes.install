<?php


use \Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\Role;


function zcs_api_attributes_install() {

    $menu_name = 'main';
    $title = 'API Attribute Status';
    $link_uri = 'internal:/api-attribute-status';

    // Check if a menu link with the same properties already exists.
    $existing_menu_links = \Drupal::entityTypeManager()->getStorage('menu_link_content')->loadByProperties([
      'menu_name' => $menu_name,
      'title' => $title,
      'link__uri' => $link_uri,
    ]);

    if (empty($existing_menu_links)) {

     // Add a sample link to the main menu.
        $menu_link = MenuLinkContent::create([
          'menu_name' => $menu_name,
          'title' =>  $title,
          'link' => [
             ['uri' => $link_uri]
          ],
          'weight' => 7   ,
          'menu_per_role__show_role' => [
            'authenticated',
          ],
        ]);
        $menu_link->save();
    }



   // Create the parent menu link.
  $parent_menu_link = MenuLinkContent::create([
    'title' => 'Price',
    'link' => ['uri' => 'route:<nolink>'],  // Adjust path as needed.
    'menu_name' => $menu_name,
    'expanded' => TRUE, // Keep it expanded to show child links.
    'weight' => 8,
  ]);
  $parent_menu_link->save();

  // Get the parent menu link ID.
  $parent_id = 'menu_link_content:' . $parent_menu_link->uuid();

  // Create the child menu link.
  $child_menu_link1 = MenuLinkContent::create([
    'title' => 'Change Pricing',
    'link' => ['uri' => 'internal:/change-network-authentication-pricing'], // Adjust path as needed.
    'menu_name' => $menu_name,
    'parent' => $parent_id, // Set the parent ID.
    'weight' => 1,
  ]);
  $child_menu_link1->save();

  // Create the child menu link.
  $child_menu_link2 = MenuLinkContent::create([
    'title' => 'Pricing Over Time',
    'link' => ['uri' => 'internal:/network_authentication_pricing_over_time'], // Adjust path as needed.
    'menu_name' => $menu_name,
    'parent' => $parent_id, // Set the parent ID.
    'weight' => 2,
  ]);
  $child_menu_link2->save();

  // Create the child menu link.
  $child_menu_link3 = MenuLinkContent::create([
    'title' => 'Client Discounts',
    'link' => ['uri' => 'internal:/demand_partner_discounts_or_different_pricing'], // Adjust path as needed.
    'menu_name' => $menu_name,
    'parent' => $parent_id, // Set the parent ID.
    'weight' => 3,
  ]);
  $child_menu_link3->save();

}



function zcs_api_attributes_uninstall() {
  $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
  $menu_items = $storage->loadByProperties(['link__uri' => 'internal:/api-attribute-status']);
  foreach ($menu_items as $menu_item) {
    $menu_item->delete();
  }


  $query = \Drupal::entityQuery('menu_link_content')
    ->condition('title', 'Price')
    ->condition('menu_name', 'main');
  $parent_ids = $query->accessCheck()->execute();

  if (!empty($parent_ids)) {
    foreach ($parent_ids as $parent_id) {
      $parent = MenuLinkContent::load($parent_id);
      if ($parent) {
        $parent_uuid = $parent->uuid();
        $parent_menu_link_id = 'menu_link_content:' . $parent_uuid;

        // Find and delete child menu links.
        $child_query = \Drupal::entityQuery('menu_link_content')
          ->condition('parent', $parent_menu_link_id);
        $child_ids = $child_query->accessCheck()->execute();

        if (!empty($child_ids)) {
          foreach ($child_ids as $child_id) {
            $child = MenuLinkContent::load($child_id);
            if ($child) {
              $child->delete();
            }
          }
        }

        // Delete the parent menu link.
        $parent->delete();
      }
    }
  }
}


/**
 * Adding new tables to add the audit record of attribute pages.
 */
function zcs_api_attributes_update_9002() {
  $tables['attributes_page_data'] = [
    'description' => 'Table for storing information about attributes.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique aggregator static ID.',
      ],
      'submit_by' => [
        'description' => 'Submitter User ID.',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
      ],
      'currency_locale' => [
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Currency of the attributes page.',
      ],
      'effective_date' => [
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Date of the effective date.',
      ],
      'page_data' => [
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'Attribute Page data for reference.',
      ],
      'approver1_uid' => [
        'description' => 'Approver-1 User ID.',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
      ],
      'approver1_status' => [
        'description' => 'Approver-1 Status.',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
      ],
      'approver2_uid' => [
        'description' => 'Approver-2 User ID.',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
      ],
      'approver2_status' => [
        'description' => 'Approver-2 Status.',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
      ],
      'attribute_status' => [
        'description' => 'Attribute Status.',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
      ],
      'created' => [
        'description' => 'Attribute Page Created date.',
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => ''
      ],
      'updated' => [
        'description' => 'Attribute Page Updated date.',
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => ''
      ],
    ],
    'primary key' => ['id'],
  ];

  $tables['attribute_status'] = [
    'description' => 'Table for storing information about attribute status.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique aggregator static ID.',
      ],
      'status' => [
        'description' => 'Attribute Page Status.',
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => ''
      ]
    ],
    'primary key' => ['id'],
  ];


  $database = \Drupal::database()->schema();
  foreach ($tables as $table_name => $table) {
    // First check if the tables exist and if missing...
    if (!$database->tableExists($table_name)) {
      $database->createTable($table_name, $table);
    }
  }

  \Drupal::database()->insert('attribute_status')
    ->fields(['status'])
    ->values(['Pending'])
    ->values(['Approved'])
    ->values(['Rejected'])
    ->execute();
}




function zcs_api_attributes_update_9003(){
  $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');

  $menu_item_object1 = current($storage->loadByProperties(['title' => 'Finance Approval']));
  if($menu_item_object1) {
    $menu_item_object1->delete();
  }
  $menu_item_object2 = current($storage->loadByProperties(['title' => 'Change Pricing']));
  if($menu_item_object2) {
    $menu_item_object2->delete();
  }



  $parent_menu = current($storage->loadByProperties(['title' => 'Price']));
  $parent_id = 'menu_link_content:' . $parent_menu->uuid();

  // Create the child menu link.
  $finance_approval_menu_child_link3 = MenuLinkContent::create([
    'title' => 'Finance Approval',
    'link' => ['uri' => 'internal:/finance-approval'], // Adjust path as needed.
    'menu_name' => 'main',
    'parent' => $parent_id, // Set the parent ID.
    'weight' => 4,
  ]);
  $finance_approval_menu_child_link3->save();
  

}