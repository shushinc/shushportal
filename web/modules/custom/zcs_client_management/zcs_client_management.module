<?php

/**
 * @file
 * Primary module hooks for zcs Client Management module.
 */
use Drupal\Core\Render\Markup;

/**
 * Implements hook_theme().
 */
function zcs_client_management_theme($existing, $type, $theme, $path) {
    return [
      'client_view' => [
        'variables' => [
          'image_url' => '',  
          'client_name' => '',
          'contact_name' => '',
          'contact_email' => '',
          'status' => '',
          'description' => '',
          'client_legal_contact' => '',
          'legal_email' => '',
          'address' => '',
          'type' => '',
          'industry' => '',
          'agreement_effective_date' => '',
          'currency' => '',
          'prepayment_amount' => '',
          'prepayment_balance_left' => '',
          'prepayment_balance_used' => '',
          'address_line_1' => '',
          'address_line_2' => '',
          'address_line_3' => '', 
          'country_code' => '',
          'postal_code' => '',
          'agreement_covers' => '',
        ],
        'template' => 'client-view',
      ],
    ];
  }



/**
 * Implements hook_mail().
 */
function zcs_client_management_mail($key, &$message, $params) {
    $email_from = \Drupal::config('system.site')->get('mail');
    switch ($key) {
        case 'client_member_invite':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = t('Partner Onboarding - Activate your account');
            $message['body'][] = $params['message'];
            break;
    }
}



function zcs_client_management_preprocess_views_view_field(&$variables) {
  if ($variables['view']->id() === 'user_management' && $variables['view']->current_display === 'page_1') {
    if (!empty($variables['row']->_entity) && $variables['row']->_entity->hasField('roles') && $variables['field']->field == 'roles_target_id') {
      $entity = $variables['row']->_entity;
      // Get referenced role entities
      $roles = $entity->get('roles')->referencedEntities();
      // Collect role labels
      $role_names = [];
      foreach ($roles as $role) {
        $role_names[] = $role->label();
      }
      // Join array into a string for output
      $roles_string = implode(', ', $role_names);

      $max_length = '20';
      if (mb_strlen($roles_string) > $max_length) {
        $trimmed = mb_substr($roles_string, 0, $max_length) . '...';
      } else {
        $trimmed = $roles_string;
      }
      // Tooltip icon (you can replace with SVG or Font Awesome)
      $tooltip_icon = '<span style="cursor: pointer; color: #888;" title="' . htmlspecialchars($roles_string, ENT_QUOTES, 'UTF-8') . '"> <i class="fa fa-info-circle" aria-hidden="true"></i></span>';

      // Final output
      $output = '<span>' . $trimmed . '</span>';

     
      $output .= $tooltip_icon;
   

      $variables['output'] = Markup::create($output);
    }
  }
}